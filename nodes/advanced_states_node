#!/usr/bin/env python

import smach
import rospy
import smach_ros

import state_machine_tutorial
from smach_tutorial.AdvancedStates import *
##-----------------------------------------------------------------------------------
class EmptyState(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=["continue"], input_keys=[], output_keys=[], io_keys=[])
    
    def execute(self, ud):
        rospy.sleep(1)
        return "continue"

def WaitSM():
    Wait_sm = smach.StateMachine(outcomes=["timeout","message_received","preempted"])
    
    
    with Wait_sm:
        Wait_sm.add('Wait', EmptyState(), transitions={"continue" : 'WaitMsg'})
        Wait_sm.add('WaitMsg', WaitForMessage(), transitions={"timeout" : "timeout",
                                                      "message_received" : "message_received",
                                                      "preempted": "preempted"})
                                                      
    return Wait_sm

def main():
    
    Wait_sm = WaitSM()
    
    introspection_server = smach_ros.IntrospectionServer('SM', Wait_sm, '/SM_root')
    introspection_server.start()
    
    Wait_sm.execute()
    
    introspection_server.stop()
    

if __name__ == '__main__':
    rospy.init_node('tutorial_node')
    exercise = rospy.get_param('tutorial_node/exercise',0) 
    if(exercise == 0):
        main()
    else:
        rospy.logerr("Exercise not listed")
            

        
